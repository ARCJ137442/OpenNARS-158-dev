********** variable unification
  IN: <<#x --> bird> ==> <#x --> flyer>>.
  IN: <<#y --> bird> ==> <#y --> flyer>>. %0; 0.7%
1

 OUT: <<#1 --> bird> ==> <#1 --> flyer>>. %0.79;0.92%

********** variable unification
  IN: (&&, <#w() --> bird>, <#w() --> flyer>).
  IN: (&&, <#x() --> bird>, <#x() --> flyer>). %0.1; 0.7%
10
 OUT: [NO REVISION]

********** variable unification
  IN: <<#x --> bird> ==> <#x --> animal>>.
  IN: <<#y --> robin> ==> <#y --> bird>>.
3

 OUT: <<#1 --> robin> ==> <#1 --> animal>>. %1.00;0.81% 

 OUT: <<#1 --> animal> ==> <#1 --> robin>>. %1.00;0.45% 


********** variable unification
  IN: <<bird --> #y> ==> <robin --> #y>>.
  IN: <<swimmer --> #w> ==> <robin --> #w>>. %0.7%
3

 OUT: <<bird --> #1> ==> <swimmer --> #1>>. %1.00;0.36% 

 OUT: <<swimmer --> #1> ==> <bird --> #1>>. %0.70;0.45% 

 OUT: <<bird --> #1> <=> <swimmer --> #1>>. %0.70;0.45% 

 OUT: <(&&,<bird --> #1>,<swimmer --> #1>) ==> <robin --> #1>>. %1.00;0.96% 

 OUT: <(||,<bird --> #1>,<swimmer --> #1>) ==> <robin --> #1>>. %0.70;0.84% 

 OUT: <(||,(--,<swimmer --> #1>),<bird --> #1>) ==> <robin --> #1>>. %0.30;0.87% 

 OUT: <(||,(--,<bird --> #1>),<swimmer --> #1>) ==> <robin --> #1>>. %0.00;0.93% 


********** variable unification
  IN: <(&&, A, <#x --> b>) ==> <#x --> c>>.
  IN: <<#y --> d> ==> <#y --> b>>.
1

 OUT: <(&&,<#1 --> d>,A) ==> <#1 --> c>>. %1.00;0.81% 


********** variable unification
  IN: <(&&, A, <#x --> b>, E) ==> <#x --> c>>.
  IN: <(&&,<#y --> d>,A) ==> <#y --> c>>. %0.8%
2

 OUT: <(&&,<#1 --> b>,E) ==> <#1 --> d>>. %1.00;0.39% 

 OUT: <<#1 --> d> ==> (&&,<#1 --> b>,E)>. %0.80;0.45% 


********** variable unification
  IN: <(&&, B, <#x --> a>) ==> <#x --> c>>. %0.7%
  IN: <<#y --> a> ==> <#y --> d>>.
1

 OUT: <(&&,<#1 --> d>,B) ==> <#1 --> c>>. %0.70;0.45% 


********** variable elimination
  IN: <<#x --> bird> ==> <#x --> animal>>.
  IN: <robin --> bird>.
2

 OUT: <robin --> animal>. %1.00;0.81% 


********** variable elimination
  IN: <<#x --> bird> ==> <#x --> animal>>.
  IN: <robin --> animal>.
2

 OUT: <robin --> bird>. %1.00;0.45% 


********** variable elimination
  IN: <<#x --> bird> <=> <#x --> animal>>.
  IN: <robin --> bird>.
2

 OUT: <robin --> animal>. %1.00;0.81% 


********** variable elimination
  IN: (&&,<#x() --> bird>,<#x() --> swimmer>).
  IN: <swan --> bird>. %0.9%
2

 OUT: <swan --> swimmer>. %0.90;0.43% 


********** variable elimination
  IN: <(&&, <#x --> a>, B) ==> <#x --> c>>.
  IN: <e --> a>.
1

 OUT: <B ==> <e --> c>>. %1.00;0.81% 


********** variable elimination
  IN: <(&&, A, <#x --> b>, C) ==> <#x --> d>>.
  IN: <e --> b>.
1

 OUT: <(&&,A,C) ==> <e --> d>>. %1.00;0.81% 


********** multiple variable elimination
  IN: <(&&,<#x --> key>,<#y --> lock>) ==> <#y --> (/,open,#x,_)>>.
  IN: <lock1 {-- lock>.
12
 OUT: <<#1 --> key> ==> <{lock1} --> (/,open,#1,_)>>. %1.00;0.81%
 

********** multiple variable elimination
  IN: <<#x --> lock> ==> (&&,<#x --> (/,open,#y(#x),_)>,<#y(#x) --> key>)>.
  IN: <lock1 {-- lock>.
3

 OUT: (&&,<#1() --> key>,<{lock1} --> (/,open,#1(),_)>). %1.00;0.81% 


********** multiple variable elimination
  IN: (&&,<#x() --> lock>,<<#y --> key> ==> <#x() --> (/,open,#y,_)>>). 
  IN: <lock1 {-- lock>. %0.9%
3

 OUT: <<#1 --> key> ==> <{lock1} --> (/,open,#1,_)>>. %0.90;0.43%
 

********** multiple variable elimination
  IN: (&&,<#x() --> lock>,<#y() --> key>,<#x() --> (/,open,#y(),_)>).
  IN: <lock1 {-- lock>. %0.9%
5

 OUT: (&&,<#1() --> key>,<{lock1} --> (/,open,#1(),_)>). %0.90;0.43% 


********** variable introduction
  IN: <swan --> bird>. 
  IN: <swan --> swimmer>. %0.8%
1

 OUT: <<#1 --> swimmer> ==> <#1 --> bird>>. %1.00;0.39% 

 OUT: <<#1 --> bird> ==> <#1 --> swimmer>>. %0.80;0.45% 

 OUT: <<#1 --> bird> <=> <#1 --> swimmer>>. %0.80;0.45% 

 OUT: (&&,<#1() --> bird>,<#1() --> swimmer>). %0.80;0.83% 


********** variable introduction
  IN: <gull --> swimmer>. 
  IN: <swan --> swimmer>. %0.8%
1

 OUT: <<swan --> #1> ==> <gull --> #1>>. %1.00;0.39% 

 OUT: <<gull --> #1> ==> <swan --> #1>>. %0.80;0.45% 

 OUT: <<gull --> #1> <=> <swan --> #1>>. %0.80;0.45% 

 OUT: (&&,<gull --> #1()>,<swan --> #1()>). %0.80;0.83% 


********** multiple variables introduction
  IN: <key1 --> key>.
  IN: <key1 --> (/, open, _, lock1)>.
13
 OUT: <<#1 --> key> ==> <#1 --> (/,open,_,lock1)>>. %1.00;0.45%

 OUT: (&&,<#1() --> (/,open,_,lock1)>,<#1() --> key>). %1.00;0.81%
 

********** multiple variables introduction
  IN: <<#x --> key> ==> <#x --> (/,open,_,lock1)>>.
3

 OUT: <<#1 --> key> ==> <(*,#1,lock1) --> open>>. %1.00;0.90%

1

 OUT: <<#1 --> key> ==> <lock1 --> (/,open,#1,_)>>. %1.00;0.90%

********** multiple variables introduction
  IN: (&&,<#x() --> (/,open,_,lock1)>,<#x() --> key>). 

2

 OUT: (&&,<#1() --> key>,<(*,#1(),lock1) --> open>). %1.00;0.90%
1

 OUT: (&&,<#1() --> key>,<lock1 --> (/,open,#1(),_)>). %1.00;0.90%

********** multiple variables introduction
  IN: <<#x --> key> ==> <lock1 --> (/,open,#x,_)>>. %0.8% 

  IN: <lock1 --> lock>.
1

 OUT: <(&&,<#1 --> key>,<#2 --> lock>) ==> <#2 --> (/,open,#1,_)>>. %1.00;0.39% 

 OUT: <<#1 --> key> ==> (&&,<#2(#1) --> (/,open,#1,_)>,<#2(#1) --> lock>)>. %0.80;0.83% 


********** multiple variables introduction
  IN: (&&,<lock1 --> (/,open,#x(),_)>,<#x() --> key>). %0.8%
  IN: <lock1 --> lock>.
1

 OUT: (&&,<#1() --> key>,<<#2 --> lock> ==> <#2 --> (/,open,#1(),_)>>). %1.00;0.39% 

 OUT: (&&,<#1() --> (/,open,#2(),_)>,<#2() --> key>,<#1() --> lock>). %0.80;0.83% 


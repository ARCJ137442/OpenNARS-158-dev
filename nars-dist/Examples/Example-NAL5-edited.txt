********** revision
<<robin --> [flying]> ==> <robin --> bird>>. 
// If robin can fly then robin is a type of bird. 
<<robin --> [flying]> ==> <robin --> bird>>. %0.00;0.60% 
// If robin can fly then robin may not a type of bird. 
1
 OUT: <<robin --> [flying]> ==> <robin --> bird>>. %0.86;0.91%
// If robin can fly then robin is a type of bird. 

********** deduction
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> [flying]> ==> <robin --> bird>>. 
// If robin can fly then robin is a type of bird. 
1
 OUT: <<robin --> [flying]> ==> <robin --> animal>>. %1.00;0.81%
// If robin can fly then robin is a type of animal. 

********** exemplification
<<robin --> [flying]> ==> <robin --> bird>>. 
// If robin can fly then robin is a type of bird. 
<<robin --> bird> ==> <robin --> animal>>.  
// If robin is a type of bird then robin is a type of animal. 
1
 OUT: <<robin --> animal> ==> <robin --> [flying]>>. %1.00;0.45%
// I guess if robin is a type of animal then robin can fly. 

********** induction
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> bird> ==> <robin --> [flying]>>. %0.80% 
// If robin is a type of bird then robin can fly. 
1
 OUT: <<robin --> [flying]> ==> <robin --> animal>>. %1.00;0.39%
// I guess if robin can fly then robin is a type of animal. 
 OUT: <<robin --> animal> ==> <robin --> [flying]>>. %0.80;0.45%
// I guess if robin is a type of animal then robin can fly. 

********** abduction
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> [flying]> ==> <robin --> animal>>. %0.8% 
// If robin can fly then robin is probably a type of animal. 
1
 OUT: <<robin --> bird> ==> <robin --> [flying]>>. %1.00;0.39%
// I guess if robin is a type of bird then robin can fly. 
 OUT: <<robin --> [flying]> ==> <robin --> bird>>. %0.80;0.45%
// I guess if robin can fly then robin is a type of bird.

********** detachment
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin can fly. 
<robin --> bird>. 
// Robin is a type of bird. 
1
 OUT: <robin --> animal>. %1.00;0.81%
// Robin is a type of animal. 

********** detachment
<<robin --> bird> ==> <robin --> animal>>. %0.70;0.90% 
// Usually if robin is a type of bird then robin is a type of animal. 
<robin --> animal>.
// Robin is a type of animal. 
1
 OUT: <robin --> bird>. %1.00;0.36%
// I guess robin is a type of bird. 

********** comparison
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> bird> ==> <robin --> [flying]>>. %0.80%  
// If robin is a type of bird then robin can fly.
1
 OUT: <<robin --> animal> <=> <robin --> [flying]>>. %0.80;0.45%
// I guess robin is a type of animal if and only if robin can fly.
 
********** comparison
<<robin --> bird> ==> <robin --> animal>>. %0.70% 
// If robin is a type of bird then usually robin is a type of animal. 
<<robin --> [flying]> ==> <robin --> animal>>.  
// If robin can fly then robin is a type of animal. 
1
 OUT: <<robin --> bird> <=> <robin --> [flying]>>. %0.70;0.45%
// I guess robin is a type of bird if and only if robin can fly. 

********** analogy
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> bird> <=> <robin --> [flying]>>. %0.80% 
// Usually, robin is a type of bird if and only if robin can fly.
1
 OUT: <<robin --> [flying]> ==> <robin --> animal>>. %0.80;0.65%
// If robin can fly then probably robin is a type of animal. 

********** analogy
<robin --> bird>. 
// Robin is a type of bird. 
<<robin --> bird> <=> <robin --> [flying]>>. %0.80% 
// Usually, robin is a type of bird if and only if robin can fly. 
1
 OUT: <robin --> [flying]>. %0.80;0.65%
// I guess usually robin can fly.

********** resemblance
<<robin --> animal> <=> <robin --> bird>>.  
// Robin is a type of animal if and only if robin is a type of bird. 
<<robin --> bird> <=> <robin --> [flying]>>. %0.9% 
// Robin is a type of bird if and only if robin can fly. 
1
 OUT: <<robin --> animal> <=> <robin --> [flying]>>. %0.90;0.81% 
// Robin is a type of animal if and only if robin can fly. 

********** conversions between Implication and Equivalence
<<robin --> [flying]> ==> <robin --> bird>>. %0.9% 
// If robin can fly then robin is a type of bird. 
<<robin --> bird> ==> <robin --> [flying]>>. %0.9% 
// If robin is a type of bird then robin can fly.
1
 OUT: <<robin --> bird> <=> <robin --> [flying]>>. %0.81;0.81%
// Robin can fly if and only if robin is a type of bird. 

********** compound composition, two premises
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> bird> ==> <robin --> [flying]>>. %0.9%  
// If robin is a type of bird then robin can fly.
1
 OUT: <<robin --> bird> ==> (||,<robin --> [flying]>,<robin --> animal>)>. %1.00;0.81%
// If robin is a type of bird then robin is a type of animal or can fly. 
 OUT: <<robin --> bird> ==> (&&,<robin --> [flying]>,<robin --> animal>)>. %0.90;0.81%
// If robin is a type of bird then usually robin is a type of animal and can fly. 

********** compound composition, two premises
<<robin --> bird> ==> <robin --> animal>>. 
// If robin is a type of bird then robin is a type of animal. 
<<robin --> [flying]> ==> <robin --> animal>>. %0.9% 
// If robin can fly then robin is a type of animal. 
1
 OUT: <(&&,<robin --> [flying]>,<robin --> bird>) ==> <robin --> animal>>. %1.00;0.81% 
// If robin can fly and is a type of bird then robin is a type of animal. 
 OUT: <(||,<robin --> [flying]>,<robin --> bird>) ==> <robin --> animal>>. %0.90;0.81% 
// If robin can fly or is a type of bird then robin is a type of animal. 

********** compound decomposition, two premises
<<robin --> bird> ==> (&&,<robin --> animal>,<robin --> [flying]>)>. %0% 
// If robin is a type of bird then robin is not a type of flying animal. 
<<robin --> bird> ==> <robin --> [flying]>>.
// If robin is a type of bird then robin can fly. 
1
 OUT: <<robin --> bird> ==> <robin --> animal>>. %0.00;0.81%
// It is unlikely that if a robin is a type of bird then robin is a type of animal. 

********** compound decomposition, two premises
(&&,<robin --> [flying]>,<robin --> swimmer>). %0% 
// Robin cannot be both a flyer and a swimmer. 
<robin --> [flying]>. 
// Robin can fly. 
4
 OUT: <robin --> swimmer>. %0.00;0.81%
// Robin cannot swim. 

********** compound decomposition, two premises
(||,<robin --> [flying]>,<robin --> swimmer>).  
// Robin can fly or swim. 
<robin --> swimmer>. %0% 
// Robin cannot swim.
1
 OUT: <robin --> [flying]>. %1.00;0.81%
 // Robin can fly. 

********** compound composition, one premises
<robin --> [flying]>.
// Robin can fly. 
(||,<robin --> [flying]>,<robin --> swimmer>)?  
// Can robin fly or swim?
5
 OUT: (||,<robin --> swimmer>,<robin --> [flying]>). %1.00;0.81%
// Robin can fly or swim.

********** compound decomposition, one premises
(&&,<robin --> swimmer>,<robin --> [flying]>). %0.9%  
// Robin can fly and swim.
2
 OUT: <robin --> swimmer>. %0.90;0.73% 
// Robin can swim. 
6
 OUT: <robin --> [flying]>. %0.90;0.73% 
// Robin can fly. 

********** negation
(--,<robin --> [flying]>). %0.1% 
// It is unlikely that robin cannot fly. 
1
 OUT: <robin --> [flying]>. %0.90;0.90%
// Robin can fly. 

********** negation
<robin --> [flying]>. %0.9%
// Robin can fly. 
(--,<robin --> [flying]>)?  
// Can robin fly or not?
1
 OUT: (--,<robin --> [flying]>). %0.10;0.90% 
// It is unlikely that robin cannot fly. 

********** contraposition
<(--,<robin --> bird>) ==> <robin --> [flying]>>. %0.1% 
// It is unlikely that if robin is not a type of bird then robin can fly. 
<(--,<robin --> [flying]>) ==> <robin --> bird>>?  
// If robin cannot fly then is robin a type of bird?
18
 OUT: <(--,<robin --> [flying]>) ==> <robin --> bird>>. %0.00;0.45%
// I guess it is unlikely that if robin cannot fly then robin is a type of bird.

********** conditional deduction
<(&&,<robin --> [flying]>,<robin --> [with-wings]>) ==> <robin --> bird>>.  
// If robin can fly and has wings then robin is a bird.
<robin --> [flying]>.  
// robin can fly.
3
 OUT: <<robin --> [with-wings]> ==> <robin --> bird>>. %1.00;0.81%
// If robin has wings then robin is a bird

********** conditional deduction
<(&&,<robin --> [chirping]>,<robin --> [flying]>,<robin --> [with-wings]>) ==> <robin --> bird>>. 
// If robin can fly, has wings, and chirps, then robin is a bird
<robin --> [flying]>. 
// robin can fly.
5
 OUT: <(&&,<robin --> [chirping]>,<robin --> [with-wings]>) ==> <robin --> bird>>. %1.00;0.81%
// If robin has wings and chirps then robin is a bird.

********** conditional deduction
<(&&,<robin --> bird>,<robin --> [living]>) ==> <robin --> animal>>.  
// If robin is a bird and it's living, then robin is an animal
<<robin --> [flying]> ==> <robin --> bird>>. 
// If robin can fly, then robin is a bird
14
 OUT: <(&&,<robin --> [flying]>,<robin --> [living]>) ==> <robin --> animal>>. %1.00;0.81% 
// If robin is living and it can fly, then robin is an animal.

********** conditional abduction
<<robin --> [flying]> ==> <robin --> bird>>.  
// If robin can fly then robin is a bird.
<(&&,<robin --> swimmer>,<robin --> [flying]>) ==> <robin --> bird>>.
// If robin both swims and flys then robin is a bird.
15
 OUT: <robin --> swimmer>. %1.00;0.45% 
// I guess robin swims.

********** conditional abduction
<(&&,<robin --> [with-wings]>,<robin --> [chirping]>) ==> <robin --> bird>>. 
// If robin is has wings and chirps, then robin is a bird
<(&&,<robin --> [flying]>,<robin --> [with-wings]>,<robin --> [chirping]>) ==> <robin --> bird>>. 
// If robin can fly, has wings, and chirps, then robin is a bird
8
 OUT: <robin --> [flying]>. %1.00;0.45% 
// I guess that robin can fly.

********** conditional abduction
<(&&,<robin --> [flying]>,<robin --> [with-wings]>) ==> <robin --> [living]>>. %0.9%
// If robin can fly and it has wings, then robin is living.
<(&&,<robin --> [flying]>,<robin --> bird>) ==> <robin --> [living]>>. 
// If robin can fly and robin is a bird then robin is living.
8
 OUT: <<robin --> bird> ==> <robin --> [with-wings]>>. %1.00;0.42% 
// I guess if robin is a bird, then robin has wings.
 OUT: <<robin --> [with-wings]> ==> <robin --> bird>>. %0.90;0.45% 
// I guess if robin has wings, then robin is a bird.

********** conditional induction
<(&&,<robin --> [chirping]>,<robin --> [flying]>) ==> <robin --> bird>>. 
// If robin can fly and robin chirps, then robin is a bird
<<robin --> [flying]> ==> <robin --> [with-beak]>>. %0.90%  
// If robin can fly then usually robin has a beak.
11
 OUT: <(&&,<robin --> [chirping]>,<robin --> [with-beak]>) ==> <robin --> bird>>. %1.00;0.42%
// I guess that if robin chirps and robin has a beak, then robin is a bird.


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Apr 04 18:55:20 BST 2008
//----------------------------------------------------

package com.googlecode.opennars.parser.loan.Loan;


/** CUP v0.10k generated parser.
  * @version Fri Apr 04 18:55:20 BST 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\005\002\000\002\005\004" +
    "\000\002\006\006\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\006\000\002\012\003\000\002" +
    "\012\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\010\000\002\015\010\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\017" +
    "\002\000\002\017\003\000\002\017\005\000\002\020\002" +
    "\000\002\020\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\004\000\002\022\004\000\002\022\003\000\002" +
    "\022\007\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\004\000\002\023\003\000" +
    "\002\024\002\000\002\024\005\000\002\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\060\002\ufffd\004\006\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\034\ufffd\044\ufffd\046\ufffd\050\ufffd" +
    "\051\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\001\002" +
    "\000\056\002\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\034\ufffd\044\ufffd\046\ufffd\050\ufffd\051\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\001\002\000\004\002\220" +
    "\001\002\000\004\065\216\001\002\000\056\002\uffff\006" +
    "\037\007\034\010\032\011\031\012\030\034\040\044\017" +
    "\046\013\050\011\051\047\053\044\054\027\055\026\056" +
    "\024\057\023\060\022\061\012\062\010\063\021\064\016" +
    "\065\015\001\002\000\076\005\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\047\uffbe\052" +
    "\uffbe\001\002\000\004\064\207\001\002\000\076\005\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\045\uffbc\047\uffbc\052\uffbc\001\002\000\036\012\030\034" +
    "\053\044\017\046\013\047\uffcb\050\011\051\047\053\044" +
    "\060\022\061\012\062\010\063\021\064\016\065\015\001" +
    "\002\000\030\005\uffb7\012\173\013\uffb7\014\122\015\120" +
    "\016\117\017\126\020\125\021\124\022\121\052\175\001" +
    "\002\000\076\005\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\045\uffc5\047\uffc5\052\uffc5\001\002" +
    "\000\004\051\172\001\002\000\036\012\030\034\053\044" +
    "\017\045\uffcb\046\013\050\011\051\047\053\044\060\022" +
    "\061\012\062\010\063\021\064\016\065\015\001\002\000" +
    "\076\005\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\045\uffbf\047\uffbf\052\uffbf\001\002\000\076" +
    "\005\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\047\uffbd\052\uffbd\001\002\000\076\005" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\045\uffbb\047\uffbb\052\uffbb\001\002\000\034\012\030" +
    "\034\040\044\017\046\013\050\011\051\047\053\044\060" +
    "\022\061\012\062\010\063\021\064\016\065\015\001\002" +
    "\000\034\012\030\034\040\044\017\046\013\050\011\051" +
    "\047\053\044\060\022\061\012\062\010\063\021\064\016" +
    "\065\015\001\002\000\056\002\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\034\ufffc\044\ufffc\046\ufffc\050\ufffc" +
    "\051\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\001\002" +
    "\000\034\012\030\034\040\044\017\046\013\050\011\051" +
    "\047\053\044\060\022\061\012\062\010\063\021\064\016" +
    "\065\015\001\002\000\034\012\030\034\040\044\017\046" +
    "\013\050\011\051\047\053\044\060\022\061\012\062\010" +
    "\063\021\064\016\065\015\001\002\000\100\005\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\047\uffc2\052\uffc2\064\163\001\002\000\010\051\047" +
    "\064\016\065\015\001\002\000\004\062\157\001\002\000" +
    "\042\005\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\035\uffe3\052\uffe3\001\002\000\004\065\155" +
    "\001\002\000\042\005\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\035\uffe8\052\uffe8\001\002\000" +
    "\042\005\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\133\024\132\025" +
    "\131\026\130\035\uffed\052\uffed\001\002\000\006\051\047" +
    "\064\016\001\002\000\046\012\030\034\040\035\uffcb\044" +
    "\017\046\013\050\011\051\047\053\044\054\027\055\026" +
    "\056\024\057\023\060\022\061\012\062\010\063\021\064" +
    "\016\065\015\001\002\000\004\064\147\001\002\000\062" +
    "\005\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\104\030\106\031\105\032\103\033\102\034" +
    "\101\035\uffdc\036\057\037\056\052\uffdc\001\002\000\076" +
    "\005\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\045\uffce\047\uffce\052\uffce\001\002\000\076\005" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\045\uffba\047\uffba\052\uffba\001\002\000\076\005\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\045\uffd2\047\uffd2\052\uffd2\001\002\000\076\005\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\047\uffd5\052\uffd5\001\002\000\006\064\uffb8\065\uffb8" +
    "\001\002\000\076\005\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\052" +
    "\041\051\042\uffd8\043\uffd8\045\uffd8\047\uffd8\052\uffd8\001" +
    "\002\000\034\012\030\034\053\044\017\046\013\050\011" +
    "\051\047\053\044\060\022\061\012\062\010\063\021\064" +
    "\016\065\015\001\002\000\034\012\030\034\053\044\017" +
    "\046\013\050\011\051\047\053\044\060\022\061\012\062" +
    "\010\063\021\064\016\065\015\001\002\000\046\012\030" +
    "\034\040\035\uffcb\044\017\046\013\050\011\051\047\053" +
    "\044\054\027\055\026\056\024\057\023\060\022\061\012" +
    "\062\010\063\021\064\016\065\015\001\002\000\010\034" +
    "\060\036\057\037\056\001\002\000\076\005\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7" +
    "\047\uffd7\052\uffd7\001\002\000\034\012\030\034\053\044" +
    "\017\046\013\050\011\051\047\053\044\060\022\061\012" +
    "\062\010\063\021\064\016\065\015\001\002\000\034\012" +
    "\030\034\053\044\017\046\013\050\011\051\047\053\044" +
    "\060\022\061\012\062\010\063\021\064\016\065\015\001" +
    "\002\000\040\012\030\034\053\042\uffcb\043\uffcb\044\017" +
    "\046\013\050\011\051\047\053\044\060\022\061\012\062" +
    "\010\063\021\064\016\065\015\001\002\000\006\042\066" +
    "\043\065\001\002\000\024\026\063\034\060\035\uffca\036" +
    "\057\037\056\042\uffca\043\uffca\045\uffca\047\uffca\001\002" +
    "\000\046\012\030\034\053\035\uffcb\042\uffcb\043\uffcb\044" +
    "\017\045\uffcb\046\013\047\uffcb\050\011\051\047\053\044" +
    "\060\022\061\012\062\010\063\021\064\016\065\015\001" +
    "\002\000\014\035\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9" +
    "\001\002\000\036\012\030\034\053\035\uffcb\044\017\046" +
    "\013\050\011\051\047\053\044\060\022\061\012\062\010" +
    "\063\021\064\016\065\015\001\002\000\036\012\030\034" +
    "\053\035\uffcb\044\017\046\013\050\011\051\047\053\044" +
    "\060\022\061\012\062\010\063\021\064\016\065\015\001" +
    "\002\000\004\035\070\001\002\000\076\005\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4" +
    "\047\uffd4\052\uffd4\001\002\000\004\035\072\001\002\000" +
    "\076\005\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\045\uffd3\047\uffd3\052\uffd3\001\002\000\076" +
    "\005\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\052\041\051\042\uffda" +
    "\043\uffda\045\uffda\047\uffda\052\uffda\001\002\000\076\005" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\052\041\051\042\uffd9\043" +
    "\uffd9\045\uffd9\047\uffd9\052\uffd9\001\002\000\022\014\122" +
    "\015\120\016\117\017\126\020\125\021\124\022\121\035" +
    "\123\001\002\000\004\035\116\001\002\000\052\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\063\027\104\030\106\031\105" +
    "\032\103\033\102\034\101\035\100\036\057\037\056\001" +
    "\002\000\076\005\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\045\uffcc\047\uffcc\052\uffcc\001\002" +
    "\000\042\012\030\034\053\035\uffcb\042\uffcb\043\uffcb\044" +
    "\017\046\013\050\011\051\047\053\044\060\022\061\012" +
    "\062\010\063\021\064\016\065\015\001\002\000\034\012" +
    "\030\034\053\044\017\046\013\050\011\051\047\053\044" +
    "\060\022\061\012\062\010\063\021\064\016\065\015\001" +
    "\002\000\034\012\030\034\053\044\017\046\013\050\011" +
    "\051\047\053\044\060\022\061\012\062\010\063\021\064" +
    "\016\065\015\001\002\000\034\012\030\034\053\044\017" +
    "\046\013\050\011\051\047\053\044\060\022\061\012\062" +
    "\010\063\021\064\016\065\015\001\002\000\034\012\030" +
    "\034\053\044\017\046\013\050\011\051\047\053\044\060" +
    "\022\061\012\062\010\063\021\064\016\065\015\001\002" +
    "\000\034\012\030\034\053\044\017\046\013\050\011\051" +
    "\047\053\044\060\022\061\012\062\010\063\021\064\016" +
    "\065\015\001\002\000\050\005\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\034\060\035\uffe1\036" +
    "\057\037\056\052\uffe1\001\002\000\050\005\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\034\060" +
    "\035\uffe0\036\057\037\056\052\uffe0\001\002\000\050\005" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\034\060\035\uffe2\036\057\037\056\052\uffe2\001\002" +
    "\000\050\005\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\034\060\035\uffdf\036\057\037\056\052" +
    "\uffdf\001\002\000\050\005\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\034\060\035\uffde\036\057" +
    "\037\056\052\uffde\001\002\000\010\035\115\042\066\043" +
    "\065\001\002\000\042\005\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\035\uffdd\052\uffdd\001\002" +
    "\000\076\005\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\045\uffcf\047\uffcf\052\uffcf\001\002\000" +
    "\044\012\030\034\040\044\017\046\013\050\011\051\047" +
    "\053\044\054\027\055\026\056\024\057\023\060\022\061" +
    "\012\062\010\063\021\064\016\065\015\001\002\000\044" +
    "\012\030\034\040\044\017\046\013\050\011\051\047\053" +
    "\044\054\027\055\026\056\024\057\023\060\022\061\012" +
    "\062\010\063\021\064\016\065\015\001\002\000\044\012" +
    "\030\034\040\044\017\046\013\050\011\051\047\053\044" +
    "\054\027\055\026\056\024\057\023\060\022\061\012\062" +
    "\010\063\021\064\016\065\015\001\002\000\044\012\030" +
    "\034\040\044\017\046\013\050\011\051\047\053\044\054" +
    "\027\055\026\056\024\057\023\060\022\061\012\062\010" +
    "\063\021\064\016\065\015\001\002\000\076\005\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\045" +
    "\uffcd\047\uffcd\052\uffcd\001\002\000\044\012\030\034\040" +
    "\044\017\046\013\050\011\051\047\053\044\054\027\055" +
    "\026\056\024\057\023\060\022\061\012\062\010\063\021" +
    "\064\016\065\015\001\002\000\044\012\030\034\040\044" +
    "\017\046\013\050\011\051\047\053\044\054\027\055\026" +
    "\056\024\057\023\060\022\061\012\062\010\063\021\064" +
    "\016\065\015\001\002\000\044\012\030\034\040\044\017" +
    "\046\013\050\011\051\047\053\044\054\027\055\026\056" +
    "\024\057\023\060\022\061\012\062\010\063\021\064\016" +
    "\065\015\001\002\000\042\005\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\133\024\132\025\131\026\130\035\ufff1\052\ufff1\001" +
    "\002\000\044\012\030\034\040\044\017\046\013\050\011" +
    "\051\047\053\044\054\027\055\026\056\024\057\023\060" +
    "\022\061\012\062\010\063\021\064\016\065\015\001\002" +
    "\000\044\012\030\034\040\044\017\046\013\050\011\051" +
    "\047\053\044\054\027\055\026\056\024\057\023\060\022" +
    "\061\012\062\010\063\021\064\016\065\015\001\002\000" +
    "\044\012\030\034\040\044\017\046\013\050\011\051\047" +
    "\053\044\054\027\055\026\056\024\057\023\060\022\061" +
    "\012\062\010\063\021\064\016\065\015\001\002\000\044" +
    "\012\030\034\040\044\017\046\013\050\011\051\047\053" +
    "\044\054\027\055\026\056\024\057\023\060\022\061\012" +
    "\062\010\063\021\064\016\065\015\001\002\000\042\005" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\035\uffec\052\uffec\001\002\000\042\005\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\035\uffeb" +
    "\052\uffeb\001\002\000\042\005\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\035\uffea\052\uffea\001" +
    "\002\000\042\005\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\035\uffe9\052\uffe9\001\002\000\042" +
    "\005\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\133\024\132\025\131" +
    "\026\130\035\ufff0\052\ufff0\001\002\000\042\005\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\133\024\132\025\131\026\130\035" +
    "\uffef\052\uffef\001\002\000\042\005\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\133\024\132\025\131\026\130\035\ufff4\052\ufff4" +
    "\001\002\000\042\005\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\133" +
    "\024\132\025\131\026\130\035\uffee\052\uffee\001\002\000" +
    "\042\005\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\133\024\132\025" +
    "\131\026\130\035\ufff3\052\ufff3\001\002\000\042\005\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\133\024\132\025\131\026\130" +
    "\035\ufff2\052\ufff2\001\002\000\076\005\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6\047" +
    "\uffd6\052\uffd6\001\002\000\076\005\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4\047\uffc4" +
    "\052\uffc4\001\002\000\022\014\122\015\120\016\117\017" +
    "\126\020\125\021\124\022\121\035\151\001\002\000\066" +
    "\005\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffdb\036\uffcd\037\uffcd\040\uffcd\041\uffcd\052\uffdb" +
    "\001\002\000\004\065\153\001\002\000\004\005\154\001" +
    "\002\000\056\002\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\034\ufffb\044\ufffb\046\ufffb\050\ufffb\051\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\062\ufffb\063\ufffb\064\ufffb\065\ufffb\001\002\000\004\005" +
    "\156\001\002\000\056\002\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\034\ufffa\044\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\001\002\000" +
    "\004\005\160\001\002\000\056\002\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\034\ufff9\044\ufff9\046\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\001" +
    "\002\000\004\005\162\001\002\000\056\002\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\034\ufff8\044\ufff8\046" +
    "\ufff8\050\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\001\002\000\076\005\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\047\uffc3\052\uffc3" +
    "\001\002\000\042\005\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\035\uffe4\052\uffe4\001\002\000" +
    "\042\005\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\035\uffe7\052\uffe7\001\002\000\042\005\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\035\uffe6\052\uffe6\001\002\000\042\005\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\035\uffe5\052" +
    "\uffe5\001\002\000\004\045\171\001\002\000\076\005\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\045\uffd1\047\uffd1\052\uffd1\001\002\000\006\064\uffb9\065" +
    "\uffb9\001\002\000\056\002\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\034\ufff6\044\ufff6\046\ufff6\050\ufff6\051" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002\000" +
    "\006\005\203\013\204\001\002\000\004\063\176\001\002" +
    "\000\006\025\177\052\200\001\002\000\004\063\201\001" +
    "\002\000\006\005\uffb6\013\uffb6\001\002\000\004\052\202" +
    "\001\002\000\006\005\uffb5\013\uffb5\001\002\000\056\002" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\034\ufff7" +
    "\044\ufff7\046\ufff7\050\ufff7\051\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\001\002\000\056\002\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\034\ufff5\044\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\001\002\000\004\047\206\001\002\000\076\005\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\045" +
    "\uffd0\047\uffd0\052\uffd0\001\002\000\076\005\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\210\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0" +
    "\047\uffc0\052\uffc0\001\002\000\006\035\uffc8\064\212\001" +
    "\002\000\004\035\215\001\002\000\006\026\213\035\uffc7" +
    "\001\002\000\006\035\uffc8\064\212\001\002\000\004\035" +
    "\uffc6\001\002\000\076\005\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\047\uffc1\052\uffc1" +
    "\001\002\000\004\005\217\001\002\000\056\002\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\034\ufffe\044\ufffe" +
    "\046\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\001\002\000\004\002\001\001\002\000\056\002" +
    "\000\006\037\007\034\010\032\011\031\012\030\034\040" +
    "\044\017\046\013\050\011\051\047\053\044\054\027\055" +
    "\026\056\024\057\023\060\022\061\012\062\010\063\021" +
    "\064\016\065\015\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\024\007\013\010\035\011\034\012\032\013" +
    "\041\014\047\015\045\016\044\021\017\022\042\023\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\061\014\047\015\045\016\044\017\204" +
    "\021\017\022\042\023\040\001\001\000\004\024\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\061" +
    "\014\047\015\045\016\044\017\167\021\017\022\042\023" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\012\166\013\041\014\047\015\045\016" +
    "\044\021\017\022\042\023\040\001\001\000\022\012\165" +
    "\013\041\014\047\015\045\016\044\021\017\022\042\023" +
    "\040\001\001\000\002\001\001\000\022\012\164\013\041" +
    "\014\047\015\045\016\044\021\017\022\042\023\040\001" +
    "\001\000\022\012\163\013\041\014\047\015\045\016\044" +
    "\021\017\022\042\023\040\001\001\000\002\001\001\000" +
    "\006\021\160\023\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\151\001\001\000\032\007\147\010\035" +
    "\011\034\012\032\013\076\014\047\015\045\016\044\017" +
    "\075\021\017\022\042\023\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\053\014\047\015\145\016\044\021" +
    "\017\022\042\023\040\001\001\000\020\013\053\014\047" +
    "\015\054\016\044\021\017\022\042\023\040\001\001\000" +
    "\032\007\074\010\035\011\034\012\032\013\076\014\047" +
    "\015\045\016\044\017\075\021\017\022\042\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\053" +
    "\014\073\015\045\016\044\021\017\022\042\023\040\001" +
    "\001\000\020\013\053\014\072\015\045\016\044\021\017" +
    "\022\042\023\040\001\001\000\022\013\061\014\047\015" +
    "\045\016\044\017\060\021\017\022\042\023\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\061\014" +
    "\047\015\045\016\044\017\063\021\017\022\042\023\040" +
    "\001\001\000\002\001\001\000\022\013\061\014\047\015" +
    "\045\016\044\017\070\021\017\022\042\023\040\001\001" +
    "\000\022\013\061\014\047\015\045\016\044\017\066\021" +
    "\017\022\042\023\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\061\014" +
    "\047\015\045\016\044\017\113\021\017\022\042\023\040" +
    "\001\001\000\020\013\112\014\047\015\045\016\044\021" +
    "\017\022\042\023\040\001\001\000\020\013\111\014\047" +
    "\015\045\016\044\021\017\022\042\023\040\001\001\000" +
    "\020\013\110\014\047\015\045\016\044\021\017\022\042" +
    "\023\040\001\001\000\020\013\107\014\047\015\045\016" +
    "\044\021\017\022\042\023\040\001\001\000\020\013\106" +
    "\014\047\015\045\016\044\021\017\022\042\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\010\144\011\034" +
    "\012\032\013\041\014\047\015\045\016\044\021\017\022" +
    "\042\023\040\001\001\000\026\010\143\011\034\012\032" +
    "\013\041\014\047\015\045\016\044\021\017\022\042\023" +
    "\040\001\001\000\026\010\142\011\034\012\032\013\041" +
    "\014\047\015\045\016\044\021\017\022\042\023\040\001" +
    "\001\000\026\010\141\011\034\012\032\013\041\014\047" +
    "\015\045\016\044\021\017\022\042\023\040\001\001\000" +
    "\002\001\001\000\026\010\140\011\034\012\032\013\041" +
    "\014\047\015\045\016\044\021\017\022\042\023\040\001" +
    "\001\000\026\010\137\011\034\012\032\013\041\014\047" +
    "\015\045\016\044\021\017\022\042\023\040\001\001\000" +
    "\026\010\126\011\034\012\032\013\041\014\047\015\045" +
    "\016\044\021\017\022\042\023\040\001\001\000\002\001" +
    "\001\000\024\011\136\012\032\013\041\014\047\015\045" +
    "\016\044\021\017\022\042\023\040\001\001\000\024\011" +
    "\135\012\032\013\041\014\047\015\045\016\044\021\017" +
    "\022\042\023\040\001\001\000\024\011\134\012\032\013" +
    "\041\014\047\015\045\016\044\021\017\022\042\023\040" +
    "\001\001\000\024\011\133\012\032\013\041\014\047\015" +
    "\045\016\044\021\017\022\042\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\024\007\013\010" +
    "\035\011\034\012\032\013\041\014\047\015\045\016\044" +
    "\021\017\022\042\023\040\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.googlecode.opennars.parser.loan.Loan.Absyn.Document pDocument() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.googlecode.opennars.parser.loan.Loan.Absyn.Document) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TruthValue ::= _SYMB_38 _DOUBLE_ _SYMB_17 _DOUBLE_ _SYMB_38 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue RESULT = null;
		Double p_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Double p_4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthFC(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TruthValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TruthValue ::= _SYMB_38 _DOUBLE_ _SYMB_38 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue RESULT = null;
		Double p_2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthF(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TruthValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TruthValue ::= 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthE(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*TruthValue*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NSPrefix ::= _SYMB_37 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*NSPrefix*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NSPrefix ::= _IDENT_ _SYMB_37 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix1(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*NSPrefix*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Literal ::= _SYMB_39 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitFalse(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Literal ::= _SYMB_44 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitTrue(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Literal ::= _STRING_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitString(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Literal ::= _DOUBLE_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitDbl(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Literal ::= _INTEGER_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Literal ::= URIRef 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitURI(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Literal ::= _SYMB_36 _IDENT_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitSVarI(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= _SYMB_36 _IDENT_ _SYMB_24 ListIdent _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent p_4 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitSVarD(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= _SYMB_6 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitQVarAn(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= _SYMB_6 _IDENT_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Literal RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitQVar(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*Literal*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // URIRef ::= NSPrefix _IDENT_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.URICur(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*URIRef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // URIRef ::= URILit 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.URIFul(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*URIRef*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListIdent ::= _IDENT_ _SYMB_18 ListIdent 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListIdent*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListIdent ::= _IDENT_ 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListIdent*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListIdent ::= 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListIdent*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListTerm ::= Term _SYMB_18 ListTerm 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListTerm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListTerm ::= Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListTerm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListTerm ::= 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListTerm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term3 ::= _SYMB_24 Term _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term3 ::= _SYMB_24 Stm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmStm(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Term3 ::= Literal 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Literal p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmLit(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Term3 ::= _SYMB_24 ListTerm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmProd(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Term3 ::= _SYMB_34 ListTerm _SYMB_35 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInSet(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term3 ::= _SYMB_32 ListTerm _SYMB_33 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExSet(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Term3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term2 ::= Term3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Term2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Term2 ::= Term _SYMB_24 ListTerm _SYMB_31 ListTerm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_5 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInImg(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Term2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Term2 ::= Term _SYMB_24 ListTerm _SYMB_30 ListTerm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_5 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExImg(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Term2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Term1 ::= Term2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term1 ::= Term1 _SYMB_29 Term2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInDif(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Term1 ::= Term1 _SYMB_28 Term2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExDif(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Term ::= Term1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Term*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Term ::= Term _SYMB_27 Term1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInInt(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Term*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Term ::= Term _SYMB_26 Term1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Term RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExInt(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Term*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stm3 ::= _SYMB_24 Stm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stm3 ::= Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmTrm(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stm3 ::= Term _SYMB_24 ListTerm _SYMB_25 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmOp(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stm3 ::= Term _SYMB_23 Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInPp(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stm3 ::= Term _SYMB_22 Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmProp(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stm3 ::= Term _SYMB_21 Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInst(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stm3 ::= Term _SYMB_20 Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmSim(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stm3 ::= Term _SYMB_19 Term 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Term p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInher(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Stm3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stm2 ::= Stm3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stm2 ::= _SYMB_40 Stm3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmFut(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stm2 ::= _SYMB_43 Stm3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPres(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stm2 ::= _SYMB_42 Stm3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPst(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stm2 ::= _SYMB_41 Stm3 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmNot(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Stm2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stm1 ::= Stm2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Stm1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stm1 ::= Stm1 _SYMB_18 Stm2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmSeq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Stm1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stm1 ::= Stm1 _SYMB_17 Stm2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPar(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Stm1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stm1 ::= Stm1 _SYMB_16 Stm2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmDisj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Stm1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stm1 ::= Stm1 _SYMB_15 Stm2 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmConj(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Stm1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stm ::= Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stm ::= Stm _SYMB_14 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEqvConc(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stm ::= Stm _SYMB_13 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEqvPred(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stm ::= Stm _SYMB_12 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpConc(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= Stm _SYMB_11 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpRet(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= Stm _SYMB_10 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpPred(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Stm _SYMB_9 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEquiv(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Stm _SYMB_8 Stm1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Stm RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_3 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpl(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentence ::= Stm TruthValue _SYMB_7 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentGoal(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentence ::= Stm _SYMB_6 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentQuest(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentence ::= Stm TruthValue _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Stm p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentJudge(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentence ::= _SYMB_5 URIRef _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentOp(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentence ::= _SYMB_4 _INTEGER_ _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		Integer p_2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentDelay(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentence ::= _SYMB_3 URILit _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentImport(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentence ::= _SYMB_2 NSPrefix URILit _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentPrefix(p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Sentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListSentence ::= ListSentence Sentence 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListSentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListSentence ::= 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence RESULT = null;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListSentence*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BaseRule ::= _SYMB_0 URILit _SYMB_1 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.BaseRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.BaseR(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*BaseRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Document ::= ListSentence 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Document RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.Doc(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Document*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Document ::= BaseRule ListSentence 
            {
              com.googlecode.opennars.parser.loan.Loan.Absyn.Document RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.BaseRule p_1 = (com.googlecode.opennars.parser.loan.Loan.Absyn.BaseRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence p_2 = (com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.DocBR(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Document*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Document EOF 
            {
              Object RESULT = null;
		com.googlecode.opennars.parser.loan.Loan.Absyn.Document start_val = (com.googlecode.opennars.parser.loan.Loan.Absyn.Document)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


// -*- Java -*- This Cup file was machine-generated by BNFC
package com.googlecode.opennars.parser.loan.Loan;

parser code {:
  public com.googlecode.opennars.parser.loan.Loan.Absyn.Document pDocument() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.googlecode.opennars.parser.loan.Loan.Absyn.Document) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Document Document;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.BaseRule BaseRule;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence ListSentence;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Sentence Sentence;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Budget Budget;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Stm Stm;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Stm Stm1;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Stm Stm2;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Stm Stm3;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Term Term;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Term Term1;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Term Term2;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Term Term3;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm ListTerm;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent ListIdent;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.URIRef URIRef;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.Literal Literal;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix NSPrefix;
nonterminal com.googlecode.opennars.parser.loan.Loan.Absyn.TruthValue TruthValue;

terminal _SYMB_0;    //   @base
terminal _SYMB_1;    //   .
terminal _SYMB_2;    //   @prefix
terminal _SYMB_3;    //   @import
terminal _SYMB_4;    //   @delay
terminal _SYMB_5;    //   @operator
terminal _SYMB_6;    //   ?
terminal _SYMB_7;    //   !
terminal _SYMB_8;    //   @budget
terminal _SYMB_9;    //   (
terminal _SYMB_10;    //   )
terminal _SYMB_11;    //   ;
terminal _SYMB_12;    //   ==>
terminal _SYMB_13;    //   <=>
terminal _SYMB_14;    //   =/>
terminal _SYMB_15;    //   =\>
terminal _SYMB_16;    //   =|>
terminal _SYMB_17;    //   </>
terminal _SYMB_18;    //   <|>
terminal _SYMB_19;    //   &&
terminal _SYMB_20;    //   ||
terminal _SYMB_21;    //   ,
terminal _SYMB_22;    //   -->
terminal _SYMB_23;    //   <->
terminal _SYMB_24;    //   }->
terminal _SYMB_25;    //   --[
terminal _SYMB_26;    //   }-[
terminal _SYMB_27;    //   &
terminal _SYMB_28;    //   |
terminal _SYMB_29;    //   -
terminal _SYMB_30;    //   ~
terminal _SYMB_31;    //   /
terminal _SYMB_32;    //   \
terminal _SYMB_33;    //   {
terminal _SYMB_34;    //   }
terminal _SYMB_35;    //   [
terminal _SYMB_36;    //   ]
terminal _SYMB_37;    //   #
terminal _SYMB_38;    //   :
terminal _SYMB_39;    //   %
terminal _SYMB_40;    //   false
terminal _SYMB_41;    //   future
terminal _SYMB_42;    //   not
terminal _SYMB_43;    //   past
terminal _SYMB_44;    //   present
terminal _SYMB_45;    //   true

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;

terminal String URILit;


start with Document;


Document ::= BaseRule:p_1 ListSentence:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.DocBR(p_1,p_2); :} 
  | ListSentence:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.Doc(p_1); :}
;
BaseRule ::= _SYMB_0 URILit:p_2 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.BaseR(p_2); :} 
;
ListSentence ::=  /* empty */  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListSentence(); :} 
  | ListSentence:p_1 Sentence:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Sentence ::= _SYMB_2 NSPrefix:p_2 URILit:p_3 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentPrefix(p_2,p_3); :} 
  | _SYMB_3 URILit:p_2 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentImport(p_2); :}
  | _SYMB_4 _INTEGER_:p_2 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentDelay(p_2); :}
  | _SYMB_5 URIRef:p_2 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentOp(p_2); :}
  | Stm:p_1 TruthValue:p_2 Budget:p_3 _SYMB_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentJudge(p_1,p_2,p_3); :}
  | Stm:p_1 _SYMB_6 Budget:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentQuest(p_1,p_3); :}
  | Stm:p_1 TruthValue:p_2 Budget:p_3 _SYMB_7  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.SentGoal(p_1,p_2,p_3); :}
;
Budget ::=  /* empty */  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.BudgetE(); :} 
  | _SYMB_8 _SYMB_9 _DOUBLE_:p_3 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.BudgetP(p_3); :}
  | _SYMB_8 _SYMB_9 _DOUBLE_:p_3 _SYMB_11 _DOUBLE_:p_5 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.BudgetPD(p_3,p_5); :}
;
Stm ::= Stm:p_1 _SYMB_12 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpl(p_1,p_3); :} 
  | Stm:p_1 _SYMB_13 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEquiv(p_1,p_3); :}
  | Stm:p_1 _SYMB_14 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpPred(p_1,p_3); :}
  | Stm:p_1 _SYMB_15 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpRet(p_1,p_3); :}
  | Stm:p_1 _SYMB_16 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmImpConc(p_1,p_3); :}
  | Stm:p_1 _SYMB_17 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEqvPred(p_1,p_3); :}
  | Stm:p_1 _SYMB_18 Stm1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmEqvConc(p_1,p_3); :}
  | Stm1:p_1  {: RESULT = p_1; :}
;
Stm1 ::= Stm1:p_1 _SYMB_19 Stm2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmConj(p_1,p_3); :} 
  | Stm1:p_1 _SYMB_20 Stm2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmDisj(p_1,p_3); :}
  | Stm1:p_1 _SYMB_11 Stm2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPar(p_1,p_3); :}
  | Stm1:p_1 _SYMB_21 Stm2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmSeq(p_1,p_3); :}
  | Stm2:p_1  {: RESULT = p_1; :}
;
Stm2 ::= _SYMB_42 Stm3:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmNot(p_2); :} 
  | _SYMB_43 Stm3:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPst(p_2); :}
  | _SYMB_44 Stm3:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmPres(p_2); :}
  | _SYMB_41 Stm3:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmFut(p_2); :}
  | Stm3:p_1  {: RESULT = p_1; :}
;
Stm3 ::= Term:p_1 _SYMB_22 Term:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInher(p_1,p_3); :} 
  | Term:p_1 _SYMB_23 Term:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmSim(p_1,p_3); :}
  | Term:p_1 _SYMB_24 Term:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInst(p_1,p_3); :}
  | Term:p_1 _SYMB_25 Term:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmProp(p_1,p_3); :}
  | Term:p_1 _SYMB_26 Term:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmInPp(p_1,p_3); :}
  | Term:p_1 _SYMB_9 ListTerm:p_3 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmOp(p_1,p_3); :}
  | Term:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.StmTrm(p_1); :}
  | _SYMB_9 Stm:p_2 _SYMB_10  {: RESULT = p_2; :}
;
Term ::= Term:p_1 _SYMB_27 Term1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExInt(p_1,p_3); :} 
  | Term:p_1 _SYMB_28 Term1:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInInt(p_1,p_3); :}
  | Term1:p_1  {: RESULT = p_1; :}
;
Term1 ::= Term1:p_1 _SYMB_29 Term2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExDif(p_1,p_3); :} 
  | Term1:p_1 _SYMB_30 Term2:p_3  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInDif(p_1,p_3); :}
  | Term2:p_1  {: RESULT = p_1; :}
;
Term2 ::= Term:p_1 _SYMB_9 ListTerm:p_3 _SYMB_31 ListTerm:p_5 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExImg(p_1,p_3,p_5); :} 
  | Term:p_1 _SYMB_9 ListTerm:p_3 _SYMB_32 ListTerm:p_5 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInImg(p_1,p_3,p_5); :}
  | Term3:p_1  {: RESULT = p_1; :}
;
Term3 ::= _SYMB_33 ListTerm:p_2 _SYMB_34  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmExSet(p_2); :} 
  | _SYMB_35 ListTerm:p_2 _SYMB_36  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmInSet(p_2); :}
  | _SYMB_9 ListTerm:p_2 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmProd(p_2); :}
  | Literal:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmLit(p_1); :}
  | _SYMB_9 Stm:p_2 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TrmStm(p_2); :}
  | _SYMB_9 Term:p_2 _SYMB_10  {: RESULT = p_2; :}
;
ListTerm ::=  /* empty */  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm(); :} 
  | Term:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListTerm(); RESULT.addLast(p_1); :}
  | Term:p_1 _SYMB_21 ListTerm:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListIdent ::=  /* empty */  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent(); :} 
  | _IDENT_:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.ListIdent(); RESULT.addLast(p_1); :}
  | _IDENT_:p_1 _SYMB_21 ListIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
URIRef ::= URILit:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.URIFul(p_1); :} 
  | NSPrefix:p_1 _IDENT_:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.URICur(p_1,p_2); :}
;
Literal ::= _SYMB_6 _IDENT_:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitQVar(p_2); :} 
  | _SYMB_6  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitQVarAn(); :}
  | _SYMB_37 _IDENT_:p_2 _SYMB_9 ListIdent:p_4 _SYMB_10  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitSVarD(p_2,p_4); :}
  | _SYMB_37 _IDENT_:p_2  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitSVarI(p_2); :}
  | URIRef:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitURI(p_1); :}
  | _INTEGER_:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitInt(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitDbl(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitString(p_1); :}
  | _SYMB_45  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitTrue(); :}
  | _SYMB_40  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.LitFalse(); :}
;
NSPrefix ::= _IDENT_:p_1 _SYMB_38  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix1(p_1); :} 
  | _SYMB_38  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.NSPrefix2(); :}
;
TruthValue ::=  /* empty */  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthE(); :} 
  | _SYMB_39 _DOUBLE_:p_2 _SYMB_39  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthF(p_2); :}
  | _SYMB_39 _DOUBLE_:p_2 _SYMB_11 _DOUBLE_:p_4 _SYMB_39  {: RESULT = new com.googlecode.opennars.parser.loan.Loan.Absyn.TruthFC(p_2,p_4); :}
;


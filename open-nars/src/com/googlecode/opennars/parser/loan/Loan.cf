-- LOAN, Non-Axiomatic Ontology Language, grammar
-- Copyright (c) 2008 Joe Geldart

entrypoints Document, Sentence ;

DocBR.	Document ::= BaseRule [Sentence] ;
Doc.	Document ::= [Sentence] ;

BaseR.	BaseRule ::= "@base" URILit "." ;								-- The base URI for the document

[].			[Sentence] ::= ;
(:).		[Sentence] ::= Sentence [Sentence] ;

SentPrefix.	Sentence ::= "@prefix" NSPrefix URILit "." ;				-- Declares a namespace prefix to be a certain URI
SentImport. Sentence ::= "@import" URILit "." ;							-- Imports a given URL
SentDelay.	Sentence ::= "@delay" Integer "." ;							-- Waits for a given number of cycles before continuing
SentOp.		Sentence ::= "@operator" URIRef "." ;						-- Declares URI to be an operator (currently unused)

SentJudge.	Sentence ::= Stm TruthValue Budget "." ;					-- A judgement with a given truth-value
SentQuest.	Sentence ::= Stm "?" Budget;								-- A question
SentGoal.	Sentence ::= Stm  TruthValue Budget"!" ;					-- A goal with a given utility

BudgetE.    Budget ::= ;
BudgetP.    Budget ::= "@budget" "(" Double ")" ;
BudgetPD.   Budget ::= "@budget" "(" Double ";" Double ")" ;

StmImpl.	Stm  ::= Stm "==>" Stm1 ;									-- Implication
StmEquiv.	Stm  ::= Stm "<=>" Stm1 ;									-- Equivalence
StmImpPred. Stm  ::= Stm "=/>" Stm1 ;									-- Predictive implication
StmImpRet.	Stm  ::= Stm "=\\>" Stm1 ;									-- Retrospective implication
StmImpConc. Stm  ::= Stm "=|>" Stm1 ;									-- Concurrent implication
StmEqvPred. Stm  ::= Stm "</>" Stm1 ;									-- Predictive equivalence
StmEqvConc. Stm  ::= Stm "<|>" Stm1 ;									-- Concurrent equivalence
StmConj.	Stm1 ::= Stm1 "&&" Stm2 ;									-- Conjunction
StmDisj.	Stm1 ::= Stm1 "||" Stm2 ;									-- Disjunction
StmPar.		Stm1 ::= Stm1 ";" Stm2 ;									-- Parallel conjunction
StmSeq.		Stm1 ::= Stm1 "," Stm2 ;									-- Sequential conjunction
StmNot.		Stm2 ::= "not" Stm3 ;										-- Negation
StmPst.		Stm2 ::= "past" Stm3 ;										-- Past-tense operator
StmPres.	Stm2 ::= "present" Stm3 ;									-- Present-tense operator
StmFut.		Stm2 ::= "future" Stm3 ;									-- Future-tense operator
StmInher.	Stm3 ::= Term "-->" Term ;									-- Inheritance
StmSim.		Stm3 ::= Term "<->" Term ;									-- Similarity
StmInst.	Stm3 ::= Term "}->" Term ;									-- Instance
StmProp.	Stm3 ::= Term "--[" Term ;									-- Property
StmInPp.	Stm3 ::= Term "}-[" Term ;									-- Instance-Property
StmOp.		Stm3 ::= Term "(" [Term] ")" ;								-- Operation
StmTrm.		Stm3 ::= Term ;												-- Bare term (name)

coercions Stm 3 ;

TrmExInt.	Term  ::= Term "&" Term1 ;									-- Extensional intersection
TrmInInt.	Term  ::= Term "|" Term1 ;									-- Intensional intersection
TrmExDif.	Term1 ::= Term1 "-" Term2 ;									-- Extensional difference
TrmInDif.	Term1 ::= Term1 "~" Term2 ;									-- Intensional difference
--TrmProd.	Term2 ::= Term2 "*" Term3 ;									-- Product
--TrmProd.	Term2 ::= [Prod] ;
TrmExImg.	Term2 ::= Term "(" [Term] "/" [Term] ")" ;	-- Extensional image
TrmInImg.	Term2 ::= Term "(" [Term] "\\" [Term] ")" ;	-- Intensional image
TrmExSet.	Term3 ::= "{" [Term] "}" ;									-- Extensional set
TrmInSet.	Term3 ::= "[" [Term] "]" ;									-- Intensional set
TrmProd.	Term3 ::= "(" [Term] ")" ;
TrmLit.		Term3 ::= Literal ;											-- Literal
TrmStm.		Term3 ::= "(" Stm ")" ;										-- Statement

coercions Term 3 ;

separator Term "," ;

-- Literals

token URILit '<' (char - ["<>\"{}|\\`"])* '>' ;							-- A URI literal token

separator Ident "," ;

URIFul.		URIRef ::= URILit ;											-- A full URI reference (possibly relative)
URICur.		URIRef ::= NSPrefix Ident ;									-- A CURIE

LitQVar.	Literal ::= "?" Ident ;										-- A query variable with name
LitQVarAn.	Literal ::= "?" ;											-- An anonymous query variable
LitSVarD.	Literal ::= "#" Ident "(" [Ident] ")" ;						-- A dependent statement variable
LitSVarI.	Literal ::= "#" Ident ;										-- An independent statement variable
LitURI.		Literal ::= URIRef ;										-- A URI reference literal
LitInt.		Literal ::= Integer ;										-- An integer literal
LitDbl.		Literal ::= Double ;										-- A double literal
LitString.	Literal ::= String ;										-- A string literal
LitTrue.	Literal ::= "true" ;										-- A true boolean
LitFalse.	Literal ::= "false" ;										-- A false boolean

NSPrefix1.	NSPrefix ::= Ident ":" ;									-- A namespace prefix
NSPrefix2.	NSPrefix ::= ":" ;											-- The default namespace prefix

TruthE.		TruthValue ::= ;											-- The default truth value
TruthF.		TruthValue ::= "%" Double "%" ;								-- Frequency only
TruthFC.	TruthValue ::= "%" Double ";" Double "%" ;					-- A full truth value

comment "{---" "---}" ;														-- Comments similar to Haskell
comment "---" ;
